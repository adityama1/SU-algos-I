- Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes,
  a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.
- __doc__ is also a valid attribute, returning the docstring belonging to the class: "A simple example class".
- Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:

EXAMPLES:
        class Dog:

            kind = 'canine'         # class variable shared by all instances

            def __init__(self, name):
                self.name = name    # instance variable unique to each instance


For example, the tricks list in the following code should not be used as a class variable because just a single list would be shared by all Dog instances:

        class Dog:

            tricks = []             # mistaken use of a class variable

            def __init__(self, name):
                self.name = name

            def add_trick(self, trick):
                self.tricks.append(trick)

Abstract Base Classes are classes that are only meant to be inherited from; you can't create instance of an ABC.
The abc module contains a metaclass called ABCMeta (metaclasses are a bit outside the scope of this article).
Setting a class's metaclass to ABCMeta and making one of its methods virtual makes it an ABC. A virtual method is one that the ABC says must exist in child classes,
but doesn't necessarily actually implement.
https://jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/


enumerate()-
a = ["apple", "orange", "banana"]
for (index, fruit) in enumerate(a):
 print str(index) + ": " + fruit

0: apple
1: orange
2: banana

from collections import defaultdict

_ throwaway variable
zip to zip!

is vs ==
One last thing to note, you may use the intern function to ensure that you're getting a reference to the same string:
>>> a = intern('a')
>>> a2 = intern('a')
>>> a is a2
True